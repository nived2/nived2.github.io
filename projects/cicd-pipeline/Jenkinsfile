pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'registry.example.com'
        APP_NAME = '3-tier-app'
    }
    
    stages {
        stage('Build') {
            steps {
                script {
                    // Build frontend
                    dir('frontend') {
                        sh 'npm install'
                        sh 'npm run build'
                    }
                    
                    // Build backend
                    dir('backend') {
                        sh 'npm install'
                        sh 'npm run build'
                    }
                }
            }
        }
        
        stage('Test') {
            parallel {
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm run test'
                        }
                    }
                }
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            sh 'npm run test'
                        }
                    }
                }
            }
        }
        
        stage('Package') {
            steps {
                script {
                    // Build and push frontend image
                    docker.build("${DOCKER_REGISTRY}/frontend:${BUILD_NUMBER}", './frontend')
                    docker.push("${DOCKER_REGISTRY}/frontend:${BUILD_NUMBER}")
                    
                    // Build and push backend image
                    docker.build("${DOCKER_REGISTRY}/backend:${BUILD_NUMBER}", './backend')
                    docker.push("${DOCKER_REGISTRY}/backend:${BUILD_NUMBER}")
                }
            }
        }
        
        stage('Deploy to Dev') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    // Deploy to development environment
                    sh """
                        kubectl apply -f k8s/dev/
                        kubectl set image deployment/frontend frontend=${DOCKER_REGISTRY}/frontend:${BUILD_NUMBER} -n dev
                        kubectl set image deployment/backend backend=${DOCKER_REGISTRY}/backend:${BUILD_NUMBER} -n dev
                    """
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'staging'
            }
            steps {
                script {
                    // Deploy to staging environment
                    sh """
                        kubectl apply -f k8s/staging/
                        kubectl set image deployment/frontend frontend=${DOCKER_REGISTRY}/frontend:${BUILD_NUMBER} -n staging
                        kubectl set image deployment/backend backend=${DOCKER_REGISTRY}/backend:${BUILD_NUMBER} -n staging
                    """
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                // Manual approval before production deployment
                input 'Deploy to production?'
                
                script {
                    // Deploy to production environment
                    sh """
                        kubectl apply -f k8s/prod/
                        kubectl set image deployment/frontend frontend=${DOCKER_REGISTRY}/frontend:${BUILD_NUMBER} -n prod
                        kubectl set image deployment/backend backend=${DOCKER_REGISTRY}/backend:${BUILD_NUMBER} -n prod
                    """
                }
            }
        }
    }
    
    post {
        success {
            // Notify on success
            slackSend channel: '#deployments',
                      color: 'good',
                      message: "Successfully deployed ${APP_NAME} to ${BRANCH_NAME}"
        }
        failure {
            // Notify on failure
            slackSend channel: '#deployments',
                      color: 'danger',
                      message: "Failed to deploy ${APP_NAME} to ${BRANCH_NAME}"
        }
    }
}
